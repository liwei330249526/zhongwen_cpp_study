#include <iostream>
using namespace std;

int main() {
    int a = 99;
    int &r = a;
    cout << a << ", " << r << endl;
    cout << &a << ", " << &r << endl;

    r = 47;
    cout << a << ", " << r << endl;
    cout << &a << ", " << &r << endl;

    return 0;
}

//99, 99
//0x7fff36e827bc, 0x7fff36e827bc
//47, 47
//0x7fff36e827bc, 0x7fff36e827bc




//我们知道，参数的传递本质上是一次赋值的过程，赋值就是对内存进行拷贝。所谓内存拷贝，是指将一块内存上的数据复制到另一块内存上。

//对于像 char、bool、int、float 等基本类型的数据，它们占用的内存往往只有几个字节，
//对它们进行内存拷贝非常快速。而数组、结构体、对象是一系列数据的集合，数据的数量没有限制，可能很少，
//也可能成千上万，对它们进行频繁的内存拷贝可能会消耗很多时间，拖慢程序的执行效率。

//C/C++ 禁止在函数调用时直接传递数组的内容，而是强制传递数组指针

//而对于结构体和对象没有这种限制，调用函数时既可以传递指针，也可以直接传递内容；
// 为了提高效率，我曾建议传递指针，这样做在大部分情况下并没有什么不妥

//但是在 C++ 中，我们有了一种比指针更加便捷的传递聚合类型数据的方式，那就是引用（Reference）

//在 C/C++ 中，我们将 char、int、float 等由语言本身支持的类型称为基本类型，
// 将数组、结构体、类（对象）等由基本类型组合而成的类型称为聚合类型（在讲解结构体时也曾使用复杂类型、构造类型这两种说法）。

//引用（Reference）是 C++ 相对于C语言的又一个扩充。引用可以看做是数据的一个别名，通过这个别名和原来的名字都能够找到这份数据。

//
//本例中，变量 r 就是变量 a 的引用，它们用来指代同一份数据；也可以说变量 r 是变量 a 的另一个名字。
// 从输出结果可以看出，a 和 r 的地址一样，都是0x28ff44；或者说地址为0x28ff44的内存有两个名字，a 和 r，
// 想要访问该内存上的数据时，使用哪个名字都行。
//
//注意，引用在定义时需要添加&，在使用时不能添加&，使用时添加&表示取地址。如上面代码所示，第 6 行中的&表示引用，第 8 行中的&表示取地址。
// 除了这两种用法，&还可以表示位运算中的与运算。

//由于引用 r 和原始变量 a 都是指向同一地址，所以通过引用也可以修改原始变量中所存储的数据